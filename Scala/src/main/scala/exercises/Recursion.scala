package exercises

import scala.annotation.tailrec

// Задание 1.
// Напишите функцию powerOfTwo, вычисляющую степень двойки.
//
// В коде предусмотрите выполнение следующих условий:
//  - требуемая для вычисления степень (тип Int) передается в функцию в качестве аргумента
//  - функция возвращает целое число
//  - используется хвостовая рекурсия
//  - код выдает корректный результат даже для степеней выше 32
//
// Парочка рекомендаций:
//  - советуем дополнительно проверить себя и прописать в нужном месте кода @tailrec (импортировать дополнительно ничего не нужно)
//  - постарайтесь сразу оптимизировать код и у аккумулятора указать дефолтное значение
//  - обратите свое внимание на тип BigInt
//
// Примечание:
//  - для прохождения проверочных тестов достаточно реализовать вычисление только положительных степеней.
//  - print результатов не требуется, напишите только код функции

@main def runPowerOfTwo(): Unit = {

  def powerOfTwo(power: Int): BigInt = {
    @tailrec
    def loop(n: Int, res: BigInt = 1): BigInt = {
      if (n <= 0) res
      else loop(n - 1, res * 2)
    }
    loop(power)
  }

  print(powerOfTwo(3))
}


// Задание 2.
// От вас требуется написать программу, которая:
//  1. увеличивает заданное число x на число y n-ое количество раз
//  2. выводит на экран полученное на шаге 1 число столько раз, сколько в нем цифр, и фразу is the result
//
// Замечания:
//  - в этот раз имплементация принта конечного результата на вас
//  - давайте ограничимся целыми числами Int
//  - обратиться к входным аргументам (они уже заданы и доступны для использования) можно через
//    fArgs(0), fArgs(1) и fArgs(2), что соответствует x, y и n
//    (не забудьте вызвать написанную вами функцию, передав ей на вход требуемые аргументы)
//  - прописывать def main(args: Array[String]) не надо - это сделано за вас, можете сразу начинать писать свой код к заданию
//  - постарайтесь обойтись без использования var и циклов while, данную программу можно и нужно написать,
//    используя только хвостовую рекурсию, ведь именно ее мы отрабатываем
//
// Sample Input:
// 10 1 5
// Sample Output:
// 15 15 is the result

@main def run(): Unit = {

  def multipleAdd(x: Int, y: Int, n: Int): String = {
    @tailrec
    def loop(i: Int, add: Int = y, sum: Int = x): Int = {
      if (i <= 0) sum
      else loop(i - 1, add, sum + add)
    }

    @tailrec
    def create_string_loop(i: Int, num_word: String, result: String = ""): String = {
      if (i < 1) result
      else create_string_loop(i - 1, num_word, s"$num_word $result")
    }

    val num = loop(n)
    val str_num = num.toString
    val str_nums = create_string_loop(str_num.length, str_num)

    s"${str_nums}is the result"
  }

  //  print(multipleAdd(fArgs(0), fArgs(1), fArgs(2)))
  print(multipleAdd(10, 1, 5))
}