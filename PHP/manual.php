<!-- Если openserver не работает, почитай вот тут https://delphinpro.ru/a/7 -->

<?php echo "Hello, <strong>php</strong> world!" ?>

<?php 
    # Короткий комментарий
    // Еще один
?>

<?= '<p>Короткий тег заменяющий &lt;?php echo ?&gt;' ?>

<?php
    /*
    Это многострочный комментарий в php
    Информация с текущими настройками PHP.
    */
    phpinfo();
?>

<!--            ..........           -->
<!--            Переменные           -->
<!--            ..........           -->

    <!-- Создание переменной -->
    <?php
        $mail = 'test@mail.ru'; 
    ?>

    <!-- Использование переменной через html (лучше код php не разбивать кодом html) -->
    <p>Это мой адрес почты: <?= $mail ?></p>

    <!-- Передача нескольких значений в echo -->
    <?php
        $name = 'Вероника';
        echo '<p>Меня зовут ', $name, ", приятно познакомиться<p>"; 
        // Проверка содержимого переменной - показывает тип переменной, длину  и содержимое
        var_dump('Vasya'); // string(5) "Vasya"
        var_dump(''); // string(0) ""
        var_dump(5); // int(5) 
        // Удаление переменной
        unset($name);    
    ?>

<?php ?>

<!--            ........................             -->
<!--            Арифметические операторы             -->
<!--            ........................             -->

<?php
    echo 5 + 5, '<br>'; // сложение
    echo 4 - 2, '<br>'; // вычитание
    echo 2 * 2, '<br>'; // умножение
    echo 4 / 2, '<br>'; // деление
    echo 5 % 2, '<br>'; // остаток от деления

    // Результат вычислений можно записать в переменную
    $var = 5 + 5;
    echo $var;
?>

<!--            ...........          -->
<!--            Типы данных          -->
<!--            ...........          -->

<?php
    // Строки
    $name =  'Петя';
    echo 'Привет, $name'; // Привет, $name
    echo "Привет, $name"; // Привет, Петя

    // Булевые
    $is_show = true;
    $can_move = false;

    // Целое число
    $sale = -800; 
        /* Размер от -2 147 483 648 до 2 147 483 647, т.е. ± 2 миллиарда для 32-битных версий PHP
        или от -9 223 372 036 854 775 808 до 9 223 372 036 854 775 807, т.е. ± 9 квинтиллионов для 64-битных версий PHP */
        // Помимо десятичной системы счисления, PHP также поддерживает двоичную, восьмеричную и шестнадцатеричную:
    $num = 1234; // десятичное число
    $num = 0123; // восьмеричное число (эквивалентно 83 в десятичной системе)
    $num = 0x1A; // шестнадцатеричное число (эквивалентно 26 в десятичной системе)
    $num = 0b11111111; // двоичное число (эквивалентно 255 в десятичной системе)

    // Дробное число
    $num = 15.28;
        // Для проверки точности чисел с плавающей запятой нельзя использовать простой оператор сравнения
    $num1 = 0.1 + 0.2;
    var_dump($num1 == 0.3); // Будет false
        // Нужно использовать функции произвольной точности
    $num2 = bcadd(0.1, 0.2, 1); // Сложение двух числе, 1 - число знаков после запятой
    var_dump($num2 == 0.3); // Будет true

    // Массив
    $array = [
        'name' => 'Вася',
        'age' => 18
    ];
    echo $array['name']; // Вася

    // Объект
    class User {
        public $name;
        public $age;

        public function show()
        {
            echo $this->name, ' ', $this->age;
        }
    }

    $petya = new User;
    $petya->name = 'Вася';
    $petya->age = 18;
    $petya->show(); // Вася 18

    // Ресурс - ссылка на внешний ресурс
    $resource = fopen('D:\OpenServer\domains\test.local\file.txt', 'r'); // функция fopen возвращает ссылку на файл

    // NULL - отсутствие значения
    $var = null;

    // Получение типа переменной
    echo gettype(15); // integer
    echo gettype('Вилка'); // string
    echo gettype(true); // boolean
?>

<!--            .........................................          -->
<!--            Динамическая типизация и приведение типов          -->
<!--            .........................................          -->

<?php
    // Пример
    echo 2 * '11abc DEF 150'; // 22  !!!
    var_dump(1 == '1abc'); // bool(true)  !!!
    
    $a = 10; // 10 - integer (целое число)
    $a = $a * 1.1; // При умножении целого числа на дробное результат - дробное число 
    echo gettype($a); // double, т.е. дробное число

    // Приведение типов
    $var = 5;
    $var = (string) $var; // Теперь в переменной лежит строка '5'
    $var = (int) $var; // Теперь опять целое число
    $var = (float) $var; // Теперь дробь 5
    $var = (bool) $var; // Теперь true

    // Арифметические операции со строками - число будет получено из первых числовых символов
    echo '12abc1' + 2; // 12 + 4 = 14

    // Приведение к булеву типу
    /*  false - это:
        0 (целое или дробное)
        '' (пустая строка)
        '0' (строка с числом 0)
        [] (пустой массив)
        null

        true - все остальное
    */
?>

<!--            ....................................................          -->
<!--            Кавычки, экранирование символов и прочие спецсимволы          -->
<!--            ....................................................          -->

<?php
    // В двойные кавычки можно подставить значение другой переменной, в одинарные нельзя
    $name = 'Вася';
    echo 'Меня зовут $name'; // Меня зовут $name
    echo "Меня зовут $name"; // Меня зовут Вася

    $price = 1499;
    echo "$priceруб"; //Ошибка Undefined variable
    echo "{$price}руб"; // 1499руб

    // Экранирование кавычек
    echo 'Прачечная "Судный день" работает с 9:00'; // Просто одни кавычки внутри других
    echo "Прачечная 'Судный день' работает с 9:00";

    echo 'Прачечная \'Судный день\' работает с 9:00'; // Экранирование обратным слешем
    echo "Прачечная \"Судный день\" работает с 9:00";
    echo '\\'; // Выведет только один обратный слеш
    
    // Табуляция и перенос строки
    $var1 = "Перенос строки: \n";
    $var2 = "Табуляция: \t";
?>

<!--            .........          -->
<!--            Константы          -->
<!--            .........          -->

<?php
    // Есть два способа создания константы - через const и через define(). Перед константой знака $ нет
    // Cуществует общепринятое соглашение всегда писать константы большими буквами, а слова разделять нижним подчёркиванием, например MY_SUPER_CONSTANT
    const LOGIN = 'admin';
    define('PASSWORD', 'qwerty');

    echo LOGIN, ' ', PASSWORD;

    // С помощью функции constant() мы можем получить значение константы, имя которой лежит в переменной:
    $const_name = 'LOGIN';
    echo constant($const_name); // admin

    // Встроенные константы - различные уровни ошибок: E_ERROR, E_WARNING, E_NOTICE и т.д.
    
    // Магические константы - значения, меняющиеся в зависимости от контекста:
    /*
        __LINE__ - текущая строка в скрипте
        __FILE__ - полный путь и имя текущего скрипта
        __DIR__ - полный путь к директории, в которой расположен скрипт
        __FUNCTION__ - имя текущей функции
        __CLASS__ - полный путь и имя текущего скрипта
        __TRAIT__ - имя текущего трейта с пространством имён
        __METHOD__ - имя текущего метода
        __NAMESPACE__ - имя текущего пространства имён
        ClassName::class - имя класса, к которому мы обращаемся, с пространством имён
    */

?>

<!--            ..............................................................................          -->
<!--            Оператор присваивания, инкремент, декремент, конкатенация, операторы сравнения          -->
<!--            ..............................................................................          -->

<?php
    $x = 5;
    $x += 2; // То же, что $x = $x + 2;
    $x -= 2; // То же, что $x = $x - 2;
    $x *= 2; // То же, что $x = $x * 2;
    $a = $b = $c = 15; // Множественное присваивание значений

    // Ин(де)кременты
    ++$x; // (пре-инкремент) - сначала увеличивает значение, затем возвращает его.
    $x++; // (пост-инкремент) - сначала возвращает значение, затем увеличивает его.
    --$x; // (пре-декремент) - сначала уменьшает значение, затем возвращает его.
    $x--; // (пост-декремент) - сначала возвращает значение, затем уменьшает его.

    // Конкатенация строк пишется через точку
    $price = 1500;
    $currency = ' руб';
    echo $price . $currency; // 1500 руб
    // Можно использовать с оператором присваивания
    $str = 'Это ';
    $str .= 'очень ';
    $str .= 'длинная ';
    $str .= 'строка.';
    echo $str; // Результат - 'Это очень длинная строка.' 

    // Операторы сравнения
    /*
        $a == $b	Истина, если $a равна $b после изменения типов.
        $a === $b	Истина, если $a равна $b и имеет тот же тип.
        $a != $b	Истина, если $a не равна $b после преобразования типов.
        $a <> $b	Истина, если $a не равна $b после преобразования типов.
        $a !== $b	Истина, если $a не равна $b или они разных типов.
        $a < $b	    Истина, если $a меньше $b.
        $a > $b	    Истина, если $a больше $b.
        $a <= $b	Истина, если $a меньше или равна $b.
        $a >= $b	Истина, если $a больше или равна $b.
        $a <=> $b	Возвращает -1, 0 или 1 когда $a соответственно меньше, равно или больше $b. Доступно с PHP 7.
    */
?>

<!--            Далее идет блок с различными условными операторами          -->

<!--            ................          -->
<!--            Оператор IF ELSE          -->
<!--            ................          -->

<?php
    // Для одной команды
    if(100 > 50)
        echo 'Условие верно.<br>';
    else
        echo 'Условие неверно.<br>';

    // Для нескольких команд
    if(200 > 100)
    {
        echo 'Условие ';
        echo 'верно.';
    }
    else
    {
        echo 'Условие ';
        echo 'неверно.';
    }
    // Или вот так
    if(200 > 100) {
        echo 'Условие ';
        echo 'верно.';
    } else {
        echo 'Условие ';
        echo 'неверно.';
    }

    // Конструкция ELSEIF
    $price = 150;
    if($price < 50)
        $price *= 1.3; // Умножаем цену на 30%
    elseif($price < 100)
        $price *= 1.2; // Умножаем цену на 20%
    elseif($price < 200)
        $price *= 1.1; // Умножаем цену на 10%
    else
        $price *= 1.05; // Умножаем цену на 5%
?>

<!--            ......................................          -->
<!--            Альтернативный синтаксис IF ELSE ENDIF          -->
<!--            ......................................          -->

    <?php if($price > 100): ?>
        <div class="div1"></div>
        <div class="div2"></div>
    <?php elseif($price < 50): ?>
        <div class="div3"></div>
        <div class="div4"></div>
    <?php else: ?>
        <div class="div5"></div>
        <div class="div6"></div>
    <?php endif; ?>

    <!-- Для сравнения, тот же кусок кода в обычном синтаксисе: -->
    <?php if($price > 100) { ?>
        <div class="div1"></div>
        <div class="div2"></div>
    <?php } elseif($price < 50) { ?>
        <div class="div3"></div>
        <div class="div4"></div>
    <?php } else { ?>
        <div class="div5"></div>
        <div class="div6"></div>
    <?php } ?>

<?php ?>

<!--            ........................          -->
<!--            Тернарный оператор в PHP          -->
<!--            ........................          -->

<?php 
    // Тернарный оператор является более коротким аналогом IF и в некоторых случаях позволяет значительно сократить код.
    $price = 100;
    // Код с оператором IF
    if($price < 1000)
        $shipping = 200;
    else
        $shipping = 100;

    // Аналогичный код с тернарным оператором
    $shipping = $price < 1000 ? 200 : 100; 
    // Условие можно взять в скобки, если так удобнее, но это необязательно
    $shipping = ($price < 1000) ? 200 : 100;

    // Также вместо обычных значений в тернарный оператор можно подставить вызов функций:
    $i = 0;
    $i === 0 ? print('Ноль') : phpinfo(); // одно из различий между echo и print заключается в том, что print можно подставить в тернарный оператор, а echo нельзя.
    
    // Также тернарные операторы можно вкладывать один в другой, создавая множественные условия:
    $price = 5000;
    // Обычный синтаксис
    if($price > 10000)
        $shipping = 0;
    elseif($price > 500)
        $shipping = 100;
    else
        $shipping = 200;
    // Сокращённый синтаксис (тернарный оператор)
    $shipping = $price > 10000 ? 0 : ($price > 500 ? 100 : 200); // Вложенный тернарный оператор обязательно помещается в скобки.
    // Вложенные тернарные операторы взрывают мозг, поэтому их лучше никогда не использовать.

    // Также в тернарном операторе есть возможность пропуска средней части:
    $var = 5;
    echo $var ?: 10;
    /*  В этом случае тернарный оператор вернёт значение $var, если оно после приведения к булеву типу будет true. 
        А если будет false, то вернётся указанное справа значение. 
        Еще один пример: */
        $price = 100;
        var_dump ($price ?: 10); // 100 потому что $price == true
    
        $price = 0;
        var_dump($price ?: 10); // 10 потому что $price == false
?>

<!--            ..........................          -->
<!--            Логические операторы в PHP          -->
<!--            ..........................          -->

<?php
    // Все логические операторы:
    /*  
        $a && $b
        Истина, если $a и $b равны true.
        $a || $b	Истина, если хотя бы одна из $a и $b равна true.
        $a xor $b	Истина, если одна из $a и $b равна true, но не обе.
        !$a	Истина, если $a не равна true.
        $a and $b	Аналогично &&
        $a or $b	Аналогично ||
    */
    // Между операторами && и and, а также между || и or есть небольшое различие - порядок выполнения:
    // операторы and и or имеют приоритет ниже, чем оператор присваивания =.
    $var = true && false;
    var_dump($var); // Выведет false

    $var = true and false; // для php этот код выглядит как ($var = true) and false;
    var_dump($var); // Выведет... true!

    // Приоритеты операторов. Чем выше оператор в таблице - тем выше его приоритет.
    /*
        ++ -- ~ (int) (float) (string) (array) (object) (bool) @
        * / %
        + - .
        < <= > >=
        == != === !== <> <=>
        &&
        ||
        ? : (тернарный оператор)
        = += -= *= **= /= .= %= &= |= ^= <<= >>=
        and
        xor
        or
    */
?>

<!--            ...............          -->
<!--            Оператор SWITCH          -->
<!--            ...............          -->

<?php
    $status = 2; // Номер статуса заказа

    if($status == 1)
        echo 'Статус: Обрабатывается';
    elseif($status == 2)
        echo 'Статус: Передан в доставку';
    elseif($status == 3)
        echo 'Статус: Выполнен';
    else
        echo 'Статус: Неизвестен';

    // Аналогичный код для switch
    switch($status)
    {
        case 1:
            echo 'Статус: Обрабатывается';
            break;
        case 2:
            echo 'Статус: Передан в доставку';
            break;
        case 3:
            echo 'Статус: Выполнен';
            break;
        default:
            echo 'Статус: Неизвестен';
    }

    // Конструкция switch использует нестрогое сравнение ==   !!!

    // Также в switch можно использовать один блок кода для нескольких значений:
    switch($status)
    {
        case 1:
        case 2:
            echo 'Ожидайте звонка менеджера';
            break;
        case 3:
        case 4:
            echo 'Заказ скоро будет доставлен';
    }    
?>

<!--            .......          -->
<!--            Массивы          -->
<!--            .......          -->

<?php
    // Создание массива
    $heroes = ['Шварценеггер', 'Сталлоне', 'Джеки Чан']; // Простой/числовой массив (ключи - индексы 0, 1, 2...)
    $arr = []; // Пустой массив
    // Ассоциативный массив: ключи - это не индексы 0, 1, 2.., а слова 'article', 'name' и 'price'
    $product = [
        'article' => 'ABC123',
        'name'    => 'Смартфон iPhone X 64Gb White',
        'price'   => 50000,
    ];
    // Одновременно в массиве могут быть как простые ключи (0, 1, 2...), так и слова

    // Вывод массива
    // Обращение к элементу массива
    echo $heroes[0]; // Выводим элемент с ключом 0
    // Для вывода массива можно использовать функцию var_dump() или print_r():
    var_dump(['samsung', 'apple', 'nokia']); // результат в браузере - array(3) { [0]=> string(7) "samsung" [1]=> string(5) "apple" [2]=> string(5) "nokia" } 
    print_r(['samsung', 'apple', 'nokia']); // результат в браузере - Array ( [0] => samsung [1] => apple [2] => nokia ) 
    // Чтобы не выводилось все в одну строку, можно использовать тег <pre>:
    echo '<pre>';
    print_r(['val1', 'val2', 'val3']);
    echo '</pre>';
    // Можно вывести с помощью цикла foreach:
    $arr = ['Огонь', 'Вода', 'Воздух', 'Земля'];
    foreach($arr as $key => $value)
        echo $key . ':' . $value . '<br>';

    // Добавление элементов

    $arr = ['name' => 'Вася'];
    // Добавляем элементы
    $arr['age'] = 20;
    $arr['status'] = 'В смятении';
    // Перезаписываем элемент
    $arr['status'] = 'Спокоен';
    // Если название ключа не играет роли, его можно опустить:
    $var = [15, 20, 25];
    $var[] = 30; // Элемент добавится с ключом 3
    $var[] = 35; // Элемент добавится с ключом 4

    // Удаление элементов
    $arr = [1, 2, 3];
    unset($arr[0]); // Удаляем 1-ый (0-й) элемент

    // Двумерные и многомерные массивы

    $human = ['name' => 'Вася'];
    // Добавляем новый элемент, содержащий массив
    $human['hands'] = ['left', 'right'];
    // Обратиться к элементу многомерного массива можно так:
    echo $human['hands'][0]; // выведет 'left'
    
    // Еще один пример создания многомерного массива:
    $products = [
        [
            'name' => 'iPhone',
            'price' => 5000,
            'status' => true
        ],
        [
            'name' => 'Samsung Galaxy',
            'price' => 5000,
            'status' => true
        ]
    ];
    // Или альтернативный вариант:
    $products = [];

    $products[] = [
        'name' => 'iPhone',
        'price' => 5000,
        'status' => true
    ];

    $products[] = [
        'name' => 'Samsung Galaxy',
        'price' => 5000,
        'status' => true
    ];

    // Количество элементов массива
    echo count([5, 10, 15]); // выведет 3
    // Если вторым параметром передать встроенную в PHP константу COUNT_RECURSIVE, 
    // то мы получим количество элементов массива и всех подмассивов, которые в нём находятся:
    $arr = [1, 2, 3];
    $arr['childs'] = [4, 5, 6];

    echo count($arr, COUNT_RECURSIVE); // выведет 7
?>


