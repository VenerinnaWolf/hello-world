#            -----------------------            #
#            Арифметические операции            #
#            -----------------------            #

1 + 2   # сложение
1 - 2   # вычитание
1 * 2   # умножение
1 ** 2  # возведение в степень
1 / 2   # деление (результат - float)
1 // 2  # целочисленное деление
1 % 2   # остаток от деления
-3      # унарный оператор -

# Арифметические операции с присвоением: +=, -=, *=, **=, /=, //=, %=


#            --------------------            #
#            Логические операторы            #
#            --------------------            #

# -------------------------
# -- Операторы сравнения --
# -------------------------

#  <   - меньше
#  >   - больше
#  <=  - меньше либо равно
#  >=  - больше либо равно
#  !=  - не равно
#  ==  - равно (проверяет равенство двух значений)

# В выражении можно использовать несколько знаков сравнения: 
x == y == z
-1 < x != 13

# -----------------
# -- Оператор is --
# -----------------

#  is  - равно (проверяет, указывают ли объекты на одну и ту же область памяти)

a = [1, 2, 3]   # Объект список
b = [1, 2, 3]   # Другой объект, который указывает на другую область памяти
print(a == b)  # => True
print(a is b)  # => False
# Для экономии памяти, булевы типы, числа и строки могут кешироваться
# Тогда is вернет True, даже если переменные разные, но имеют одно значение

# ! Для проверки на None всегда нужно использовать оператор is: 
if var is None

# Обратное к is - is not
print(a is not b)  # => True

# -----------------
# -- Оператор in --
# -----------------

# in - принадлежность (проверяет, находится ли элемент в коллекции)
# Работает для строк и любых других итерируемых объектов (списки, кортежи и пр)

print('a' in 'bcabc')    # True
print('ac' in 'abc')     # False
print(1 in [3, '5', 1])  # True

# Обратное к in - not in
print('ac' not in 'abc')  # True

# -------------------------
# -- Логические операции --
# -------------------------

# Имеют приоритет ниже, чем операции сравнения

#  and - и
#  or  - или
#  not - не

print(a == 1 or b != 10)


#            -------------------            #
#            Побитовые операторы            #
#            -------------------            #

# Скопировать отсюда https://skillbox.ru/media/code/operatory-python-dlya-chego-oni-nuzhny-i-kakimi-byvayut/


#            ---------------------            #
#            Приоритеты операторов            #
#            ---------------------            #

# Самые приоритетные операции вверху, снизу — с низким приоритетом. 

# Вычисления выполняются слева направо, то есть, если в выражении встретятся операторы одинаковых приоритетов, первым будет выполнен тот, что слева.
# ! Оператор возведения в степень исключение из этого правила. Из двух операторов ** сначала выполнится правый, а потом левый.

# Операторы	    Описание
#  ()	        Скобки
#  **	        Возведение в степень
#  +x, -x, ~x	Унарные плюс, минус и битовое отрицание
#  *, /, //, %	Умножение, деление, целочисленное деление, остаток от деления
#  +, -	        Сложение и вычитание
#  <<, >>	    Битовые сдвиги
#  &	        Битовое И
#  ^	        Битовое исключающее ИЛИ (XOR)
#  |	        Битовое ИЛИ
#  ==, !=, >, >=, <, <=, is, is not, in, not in	    Сравнение, проверка идентичности, проверка вхождения
#  not	        Логическое НЕ
#  and	        Логическое И
#  or	        Логическое ИЛИ
