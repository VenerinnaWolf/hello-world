# Множества

#            ---------            #
#            Множества            #
#            ---------            #

# Множество - это набор элементов без определенного порядка, как в математике.
# ! Это изменяемый и итерируемый тип данных.

# Для создания множеств в питоне используются хеш-таблицы,
# поэтому проверки принадлежности, добавление, удаление элементов проводятся за О(1) (в списках - О(n))

# В множество нельзя добавить изменяемые объекты (списки, множества и тд), т.к у них нет фиксированного хеша
# frozenset - неизменяемое множество, поэтому его добавить можно)

# -----------------------
# -- Создание множеств --
# -----------------------

my_set = {3, 1, 2}
print(my_set)  # => {1, 2, 3} - порядок другой, т.к хеш функция не гарантирует, что если A>B, то h(A) > h(B).

# 1. Повторные элементы попадают в множество в единственном экземпляре
# Множества с одинаковыми элементами считаются равными.
first_set = {1, 2, 1, 3}
second_set = {3, 2, 1}
print(first_set == second_set)  # => True

# 2. Множество может содержать объекты разных типов
mixed_set = {1, 3.14, (1, 2, 3), "i have no idea why i'm here"}
print(mixed_set)

# 3. Создание пустого множества
empty_set = set()

# -------------------------
# -- Работа с множеством --
# -------------------------

# 1. Добавление элемента в множество - add().
# При добавлении существующего элемента, множество не меняется
my_set = {3, 1, 2}
my_set.add(4)
print(my_set)  # => {1, 2, 3, 4}

# 2. Перебрать элементы множества - for
for elem in my_set:
    print(elem, end=' ')
# => {1, 2, 3, 4} - упорядоченность - чистая случайность

# 3. Проверка на принадлежность множеству - in
if 1 in my_set:
    print('1 in set')

# 4. Удаление элемента из множества - discard() и remove()
# Если удаляемого элемента в множестве не было, то
# discard не изменит состояния множества,
# а remove выпадет с ошибкой.

# 5. Количество элементов - len(). Так же, как в строках, списках и кортежах
print(len({1, 4, 2, 3, 2, 1}))  # => 4, т.к в множестве 4 разных элемента

# Множество итерируемо, значит к нему можно применять соответствующие функции

# 6. Вывод упорядоченных элементов - sorted(). Правда, для вывода придется привести к строке
my_set = {'abba', 'a', 'long string'}
print(', '.join(my_set))          # => long string, a, abba
print(', '.join(sorted(my_set)))  # => a, abba, long string

# 7. map()

# ----------------------------------------
# -- Групповые операции над множествами --
# ----------------------------------------

# 1. Операции, изменяющие множество: (В результате создается новое множество)
# A | B - Объединение множеств
# A & B - Пересечение множеств
# A - B - Множество, элементы которого входят в A, но не входят в B
# A ^ B - Элементы входят в A | B, но не входят в A & B
# Для этих операций есть и варианты с присвоением: |=, &=, -=, ^=

# 2. Операции сравнения:
# A == B - Все элементы совпадают
# A != B - Есть различные элементы
# A <= B - Все элементы A входят в B (аналогично есть операция A >= B)
# A < B  - A <= B и A != B (аналогично есть операция A > B)

# --------------------------
# -- Преобразование типов --
# --------------------------

# -- Преобразование в множество: set() --
# Можно создавать множество с помощью функции set() из чего угодно итерируемого:
set_from_list = set([1, 2, 3])  # из списка  => {1, 2, 3}
set_from_tuple = set((4, 5, 6))  # из кортежа  => {4, 5, 6}
set_from_str = set("lol")  # из строки  => {'l', 'o'}
set_from_range = set(range(2, 22, 3))  # из диапазона  => {2, 5, 8, 11, 14, 17, 20}
set_from_map = set(map(abs, (1, 2, 3, -2, -4)))  # из map  => {1, 2, 3, 4}
set_from_set = set({1, 2, 3})  # из другого множества  => {1, 2, 3}

# -- Преобразование из множества --
list_from_set = list({3, 2, 1, 2})  # => [1, 2, 3]
tuple_from_set = tuple({3, 2, 1, 2})  # => (1, 2, 3)
sting_from_set = str({3, 2, 1, 2})  # => "{1, 2, 3}"
