# Списки: изменение списков, передача в функцию, преобразование типов, сортировка, другие методы

#            ------            #
#            Списки            #
#            ------            #

# Список это аналог массивов в других ЯП.
# Во многом они похожи на кортежи; к ним применимы len(), срезы
# Отличие в том, что они изменяемы

myList = [1, 2, 3]
myList[1] = 4
print(myList)   # => [1, 4, 3]

# -----------------------
# -- Изменение списков --
# -----------------------

# Список является ссылкой

a = [1, 2]  # a - это ссылка на объект со значением [1, 2]
b = a       # b - это новая ссылка на `тот же` объект
b[0] = 3    # При изменении значения объекта, значение по любой ссылке изменится
print(a)    # => [3, 2]
print(b)    # => [3, 2]

a = [1, 2]  # a - ссылка на `один` объект со значением [1, 2]
b = [1, 2]  # b - ссылка на `другой` объект со значением [1, 2]
a[0] = 3    # Объект по ссылке a теперь равен [3, 2]
print(b)    # => [1, 2]. Объект по ссылке b не изменился, это другой объект

a = [1, 2]
b = a
a = [3, 4]  # Привязали другой объект. Теперь у a и b ссылки на разные объекты
print(b)    # => [1, 2]

# ----------------------------------------------------
# -- Передача списка в функцию в качестве параметра --
# ----------------------------------------------------

# В функцию список передается тоже ссылкой.
# Следовательно, функция может изменить значения внутри списка:


def replaceFirst(myList):
    myList[0] = 'x'


nowList = list('abcdef')
replaceFirst(nowList)   # => ['x', 'b', 'c', 'd', 'e', 'f']
print(nowList)


# Саму ссылку функция изменить не сможет:

def reverseList(funcList):
    funcList = funcList[::-1]   # Операция среза создает новый объект


mainList = list('abc')
reverseList(mainList)   # => ['a', 'b', 'c']. Список не изменился
print(mainList)

# --------------------------
# -- Преобразование типов --
# --------------------------

# -- Преобразование в список: list() --
my_tuple = (1, 2, 3)
my_list = list(my_tuple)   # => [1, 2, 3]

my_string = '123'
my_list = list(my_string)  # => ['1', '2', '3']

# -- Преобразование из списка --
my_list = [1, 2, 3]
my_tuple = tuple(my_list)  # => (1, 2, 3)
my_string = str(my_list)   # => '[1, 2, 3]'

# ------------------------
# -- Сортировка списков --
# ------------------------

# 1. Метод .sort()

# Изменяет исходный список.
# Принимает на вход только список
my_list = [1, 4, 2, 3]
my_list.sort()  # => [1, 2, 3, 4]

# 2. Функция sorted()

# Не изменяет исходный список.
# Принимает на вход любой итерируемый объект. Возвращает список
my_list = [1, 4, 2, 3]
sorted_list = sorted(my_list)  # => [1, 2, 3, 4]

# 3. Сортировка по невозрастанию (убыванию)
my_list.sort(reverse=True)
sorted_list = sorted(my_list, reverse=True)

# 4. Параметр key в функции sort()

# Ключ (key) - это функция, которая применяется к каждому элементу списка,
#   а потом сравнение элементов происходит по значению этой функции

strings = ['c', 'abb', 'b']
print(sorted(strings, key=len))  # => ['c', 'b', 'abb']
# Т.е сортировка произошла по длине.
# При этом строки одинаковой длины сохранили свой порядок


# ---------------------
# -- Полезные методы --
# ---------------------

# 1. НЕ изменяющие список и возвращающие значение

# count(x) - подсчитывает число вхождений значения x в список. O(N)
# index(x) - находит позицию первого вхождения значения x в список. O(N)
# index(x, from) - находит позицию первого вхождения значения x в список,
#   начиная с позиции from. O(N)

# 2. Изменяющие список и НЕ возвращающие значение

# append(x) - добавляет значение x в конец списка
# extend(otherList) - добавляет все содержимое списка otherList в конец списка.
#   В отличие от операции + изменяет объект, к которому применен, а не создает новый
# remove(x) - удаляет первое вхождение числа x в список. O(N)
# insert(index, x) - вставляет число x в список так, что оно оказывается на позиции index.
#   Число, стоявшее на позиции index и все числа правее него сдвигаются на один вправо. O(N)
# reverse() - Разворачивает список. O(n)
#   Меняет значение по ссылке, а не создает новый список как myList[::-1]

# 3. Изменяющие список и возвращающие значение

# pop() - возвращает последний элемент списка и удаляет его
# pop(index) - возвращает элемент списка на позиции index и удаляет его. O(N)
