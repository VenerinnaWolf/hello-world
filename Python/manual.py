# Мануал пишу в основном по этому курсу:
# https://code-basics.com/ru/languages/python

# -- Вывод на экран --
# Точка с запятой в конце не нужна
print("Hello, World!")

# -- Линтер (стандарт кодирования) --
# Общий стандарт в Python - PEP8 https://peps.python.org/pep-0008/
# Программы, проверяющие на соответствие этому стандарту называются линтерами.
# Самый популярный линтер:
# flake8 https://flake8.pycqa.org/en/latest/user/error-codes.html


#            -----------------------            #
#            Арифметические операции            # 
#            -----------------------            #

1 + 2   # сложение
1 - 2   # вычитание
1 * 2   # умножение
1 ** 2  # возведение в степень
1 / 2   # деление (результат - float)
1 // 2  # целочисленное деление
1 % 2   # остаток от деления
-3      # унарный оператор -

# Чтобы вывести результат на экран, нужно написать print:
print(1 + 2)    # => 3
print(-8 / -4)  # => 2.0 (то есть можно минусы в скобочки не ставить)


#            ---------------------            #
#            Кавычки и спецсимволы            # 
#            ---------------------            #

# -- Спецсимволы --

# Экранирование \
# Переход на следующую строку \n
# Табуляция \t,
# Возврат каретки \r — работает только в Windows
print("- Are you hungry?\n- Aaaarrrgh!")

# Экранирование (\) кавычек
print("Dragon's mother said \"No\"")

# Экранирование обратного слеша
print("\\")     # => \


#            ------            #
#            Строки            # 
#            ------            #

# -------------------------------------
# -- 5 способов форматирования строк --
# -------------------------------------

name = "Дмитрий"
age = 25

# 1. Конкатенация
print("Меня зовут " + name + ". Мне " + str(age) + " лет.")

# 2. %-форматирование

# Передавать значения в строку можно через списки, кортежи и словари.
# Во втором случае значения помещаются не по позиции, а по имени.
print("Меня зовут %s. Мне %d лет." % (name, age))
print("Меня зовут %(name)s. Мне %(age)d лет." % {"name": name, "age": age})

# 3. Template-строки
s = Template('Меня зовут $name. Мне $age лет.')
print(s.substitute(name=name, age=age))

# 4. Форматирование с помощью метода format()
print("Меня зовут {}. Мне {} лет.".format(name, age))
print("Меня зовут {name} Мне {age} лет.".format(age=age, name=name))

# 5. Интерполяция или же f-строки.
print(f"Меня зовут {name} Мне {age} лет.")

# -----------------------
# -- Multi-line строки --
# -----------------------

# Пишется внутри тройных кавычек (как """, так и ''')
# Не требует написания \n для переноса строки
# Не требует экранирования кавычек
text = """Здесь не нужно экранировать
'одинарные' и
"двойные" кавычки"""

# -- Из таких строк можно делать f-строки --
a = 'A'
b = 'B'
text = f'''{a} и {b}
сидели на трубе'''

# --------------------------
# -- Обращение по индексу --
# --------------------------

# Спецсимволы вроде \n считаются за один символ
# Отрицательные индексы начинают отсчет от конца строки
first_name = 'Alexander'
print(first_name[0])  # => A
print(first_name[-1])  # => r

# Изменять значение по индексу нельзя
first_name[0] = 'B'  # TypeError: 'str' object does not support item assignment

# -----------------------
# -- Некоторые функции --
# -----------------------

# -- Длина строки --
print(len('Hello!'))  # => 6

# -- Символ из кодировки ASCII --
print(chr(63))  # => Символ "?"

# ----------------------
# -- Некоторые методы --
# ----------------------

name = 'Python'

# -- Индекс первого вхождения буквы в строку --
name.find('t')  # 2

# -- Верхний регистр --
upper_name = name.upper()  # => 'PYTHON'

# -- Нижний регистр --
name.lower()  # 'python'

# -- Заменяет одну подстроку другой --
name.replace('on', 'off')  # 'Pythoff'


#            -----------------------            #
#            Срез строки (подстрока)            # 
#            -----------------------            #

date = '12-08-2034'
year = date[6:10]  # подстрока с 6 индекса по 10 индекс, не включая 10-й
print(year)  # => 2034

value = 'Hexlet'

# -- Можно не указывать одну из границ --
value[3:]  # 'let'
value[:3]  # 'Hex'

# -- Можно указывать отрицательные индексы --

# Правая граница отрицательная. Считаем -1 от конца строки
value[3:-1]  # 'le'
# Левая граница отрицательная. Считаем -5 от конца строки
value[-5:3]  # 'ex'

# --------------------
# -- Шаг извлечения --
# --------------------

# Необязательный третий параметр
# По умолчанию этот шаг = 1
# Шаг 2 это каждый второй в подстроке (индексы [0], [2] и т.д)
# Если взять срез S[a:b:d],
# то в результате будут взяты символы с индексами a, a+d, a+2*d и т.д

value[1:5:2]  # el
# 1:5 это подстрока 'exle'
# 1:5:2 - шаг 2 это [0], [2] и т.д, то есть 'e' и 'l'

value[:5:2]  # 'Hxe'
value[1::2]  # 'elt'

# -- Отрицательный шаг извлечения --

# Переворот строки
value[::-1]  # 'telxeH'
# Если шаг отрицательный, и элементы извлекаются в обратном порядке
# — тогда и границы среза тоже нужно указывать в обратном порядке.
# Первой указывается правая граница среза, второй — левая:
value[4:1:-1]  # 'elx'


#            ---------            #
#            Пременные            # 
#            ---------            #

first = "Kings"
last = 'road'
what = first + last

euros_count = 100
dollars = euros_count * 1.25

# -- Подходы к именованию переменных --

# kebab-case — составные части переменной разделяются дефисом (my-super-var)
# snake_case — для разделения используется подчеркивание (my_super_var)
# CamelCase — каждое слово в переменной пишется с заглавной буквы (MySuperVar)
# В Python используется snake_case

# -- Костанты --
# Те же переменные, но пишутся заглавными буквами (и, увы, их можно поменять)
PI = 3.14


#            --------------------------            #
#            Явное преобразование типов            # 
#            --------------------------            #

# Python - язык со строгой типизацией, в отличие от PHP или JavaScript

# -- int() - преобразование в целое число --

value = '0'
converted_value = int(value)    # => 0
converted_value2 = int('10')    # => 10

# Булевые переменные
converted_value3 = int(False)   # => 0
converted_value4 = int(True)    # => 1

# Если преобразуется число с плавающей точкой
# то отбрасывается вся дробная часть
converted_value5 = int(3.5)     # => 3

# -- str() - преобразование в строку --

value = str(10)     # '10'
value2 = str(True)  # 'True'

# -- float() - преобразование в число с плавающей запятой --

value3 = float(5)   # 5.0

# В операциях с float, все int неявно преобразуются в float
# Неявно выполняется код float(3) + 1.2
value = 3 + 1.2     # 4.2


#            -------            #
#            Функции            # 
#            -------            #

# ------------------------
# -- Встроенные функции --
# ------------------------

# -- Есть стандартная библиотека, и в ней есть тысячи функций --
# Справочник встроенных функций: https://docs-python.ru/standart-library/

# -- Есть функции, а есть методы --
# Метод - это действие над объектом, и вызывается через точку
name = 'Python'
print(name)     # Функция
name.lower()    # Метод

# -- Некоторые методы дублируют функции (или наоборот) --
# Такие методы, которые не предназначены для прямого вызова, обернуты в __
x = -5
abs(x)          # вызывает x.__abs__() - модуль числа x
pow(x, 3)       # вызывает x.__pow__(3) - x в степени 3
len('Hexlet')   # вызывает 'Hexlet'.__len__()

# ----------------------------------
# -- Создание собственных функций --
# ----------------------------------

# -- Определение функции --


def show_greeting():
    # Внутри тела отступ четыре пробела или одна табуляция
    text = 'Hello, Hexlet!'
    print(text)


show_greeting()


#            -------            #
#            Объекты            # 
#            -------            #

# У объектов есть атрибуты и методы

# ------------------------
# -- Встроенные объекты --
# ------------------------

# Например, строка - это объект в Python.

# -- Методы --

first_name = '  Grigor   \n'
print(first_name.strip())  # 'Grigor'

# Примитивные методы не меняют само содержимое переменной
name = 'Tirion'
print(name.upper())  # => TIRION
print(name)  # => Tirion

# -- Атрибуты --

# Например, артибут, возвращающий документацию функции:
len.__doc__  # 'Return the number of items in a container.'

# Атрибуты работают и выглядят как переменные,
# только указываются через точку после объекта.
